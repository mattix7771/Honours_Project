import path from 'path';
import fs from 'fs';
import readline from 'readline';
import ini from 'ini';
import { fileURLToPath } from 'url';
import { getSpecificProduct } from './database.js';
import { LlamaModel, LlamaContext, LlamaChatSession } from 'node-llama-cpp';



// Initialize the Llama Model
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const modelPath = path.join(__dirname, "models", "llama-2-7b-chat.Q2_K.gguf");
// const model = new LlamaModel({ modelPath });
const model = new LlamaModel({
  modelPath,
  gpuLayers: 33,
  streaming: true
});

const context = new LlamaContext({ model });
const session = new LlamaChatSession({ context });

console.log("llama_adding_knowledge_to_model");

// Prompt generated by ChatGPT
async function addKnowledgeToModel(){
  const knowledge = fs.readFileSync('starting_context.txt', 'utf-8');
  const lines = knowledge.split(/\r?\n/);

  for (const line of lines) {
    await session.prompt(line);
  }
  console.log("llama_knowledge_added_to_model");
}

addKnowledgeToModel();







export async function handleRequest(res, userPrompt){
  
  try {
    if (!userPrompt) {
      console.log("No user prompt provided")
      return new Error('No user prompt provided');
    }

    const productCategories = ["phones", "tvs", "headphones", "laptops", "watches"];
    let userPromptCategory, userPromptFilter, direction, limit = 1;
    let suggestedProductString;

    for (const category of productCategories) {
      if (userPrompt.includes(category) || userPrompt.includes(category.slice(0, -1))) {
        userPromptCategory = category;
        break;
      }
    }

    if(userPrompt.includes("cheap") || userPrompt.includes("economic") || userPrompt.includes("cost") || userPrompt.includes("price") || userPrompt.includes("reasonable") || userPrompt.includes("economical")){
      userPromptFilter = "price";
      direction = "ASC";
    } else if (userPrompt.includes("expensive") || userPrompt.includes("luxury") || userPrompt.includes("premium") || userPrompt.includes("high-end") || userPrompt.includes("costly") || userPrompt.includes("pricey")){
      userPromptFilter = "price";
      direction = "DESC";
    } else if (userPrompt.includes("best") || userPrompt.includes("top") || userPrompt.includes("highest") || userPrompt.includes("greatest") || userPrompt.includes("most")){
      userPromptFilter = "rating";
      direction = "DESC";
    } else if (userPrompt.includes("worst") || userPrompt.includes("bottom") || userPrompt.includes("lowest") || userPrompt.includes("least")){
      userPromptFilter = "rating";
      direction = "ASC";
    } else if (userPrompt.includes("other") || userPrompt.includes("different") || userPrompt.includes("another") || userPrompt.includes("alternative") || userPrompt.includes("similar") || userPrompt.includes("option")){
      userPromptFilter = "price";
      direction = "ASC";
      limit = 2;
    }

    // if(userPromptCategory && userPromptFilter && direction && limit != 1){
    //   const products = await getSpecificProduct(userPromptCategory, userPromptFilter, direction, limit);
    //   console.log(products[1])
    //   const reply = session.prompt("user prompt: \"" + userPrompt + "\" suggested products: " + JSON.stringify(products[1]), {
    //     //maxTokens: 70,
    //   });
    //   return reply;
    // } else
     if(userPromptCategory && userPromptFilter && direction){
      const products = await getSpecificProduct(userPromptCategory, userPromptFilter, direction, limit);
      suggestedProductString = products[0].name.split(' ').slice(0,5).join(' ') + " £" + products[0].price + " " + products[0].rating.split(' ').slice(0,1) + " stars";
      const reply = session.prompt("user prompt: \"" + userPrompt + "\" suggested products: " + suggestedProductString, {
        maxTokens: 70,
      });
      console.log("user prompt: " + userPrompt + " suggested products: " + suggestedProductString)
      return reply;
    } else if(userPromptCategory){
      const products = await getSpecificProduct(userPromptCategory, "price", "ASC", limit);
      suggestedProductString = products[0].name.split(' ').slice(0,5).join(' ') + " £" + products[0].price + " " + products[0].rating.split(' ').slice(0,1) + " stars";
      const reply = session.prompt("user prompt: \"" + userPrompt + "\" suggested products: " + suggestedProductString, {
        maxTokens: 70,
      });
      console.log("user prompt: " + userPrompt + " suggested products: " + suggestedProductString)
      return reply;
    } else {
      const reply = session.prompt("user prompt: \"" + userPrompt + "\"", {
        maxTokens: 70,
      });
      console.log("user prompt: " + userPrompt + " suggested products: " + suggestedProductString)
      return reply;
    }
  } catch (error) {
    console.error(error);
  }
}